"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/internet-speed-checker";
exports.ids = ["vendor-chunks/internet-speed-checker"];
exports.modules = {

/***/ "(ssr)/./node_modules/internet-speed-checker/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/internet-speed-checker/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nclass InternetSpeedChecker {\n    convertSpeed(speed) {\n        if (speed === null || speed === 0) {\n            return {\n                value: 0,\n                unit: \"bps\"\n            };\n        }\n        if (speed > 1e9) {\n            return {\n                value: speed / 1e9,\n                unit: \"Gbps\"\n            };\n        } else if (speed > 1e6) {\n            return {\n                value: speed / 1e6,\n                unit: \"Mbps\"\n            };\n        } else if (speed > 1e3) {\n            return {\n                value: speed / 1e3,\n                unit: \"Kbps\"\n            };\n        } else {\n            return {\n                value: speed,\n                unit: \"bps\"\n            };\n        }\n    }\n    async measureDownloadSpeed() {\n        const url = \"https://www.cloudflare.com/cdn-cgi/trace\";\n        const startTime = new Date().getTime();\n        try {\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n            const reader = response.body?.getReader();\n            if (!reader) {\n                throw new Error(\"ReadableStream not supported.\");\n            }\n            let totalBytes = 0;\n            while(true){\n                const { done, value } = await reader.read();\n                if (done) {\n                    break;\n                }\n                totalBytes += value?.length || 0;\n            }\n            const endTime = new Date().getTime();\n            const durationInSeconds = (endTime - startTime) / 1000;\n            const speedBytesPerSecond = totalBytes / durationInSeconds;\n            this.downloadSpeed = speedBytesPerSecond;\n        } catch (error) {\n            this.downloadSpeed = 0; // Set to 0 if there's an error (no connection)\n            if (error instanceof Error) {\n                console.error(\"Error measuring download speed:\", error.message);\n            } else {\n                console.error(\"Unknown error type:\", error);\n            }\n        }\n    }\n    async measureUploadSpeed() {\n        const uploadData = new Array(1024 * 1024).fill(\"a\").join(\"\");\n        const url = \"https://httpbin.org/post\";\n        const startTime = new Date().getTime();\n        try {\n            const response = await fetch(url, {\n                method: \"POST\",\n                body: uploadData\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n            const endTime = new Date().getTime();\n            const durationInSeconds = (endTime - startTime) / 1000;\n            const speedBytesPerSecond = uploadData.length / durationInSeconds;\n            this.uploadSpeed = speedBytesPerSecond;\n        } catch (error) {\n            this.uploadSpeed = 0; // Set to 0 if there's an error (no connection)\n            if (error instanceof Error) {\n                console.error(\"Error measuring upload speed:\", error.message);\n            } else {\n                console.error(\"Unknown error type:\", error);\n            }\n        }\n    }\n    getFormattedDownloadSpeed() {\n        return `${this.convertSpeed(this.downloadSpeed).value.toFixed(2)} ${this.convertSpeed(this.downloadSpeed).unit}`;\n    }\n    getFormattedUploadSpeed() {\n        return `${this.convertSpeed(this.uploadSpeed).value.toFixed(2)} ${this.convertSpeed(this.uploadSpeed).unit}`;\n    }\n    startSpeedCheck() {\n        setInterval(()=>{\n            this.measureDownloadSpeed();\n            this.measureUploadSpeed();\n            this.getFormattedDownloadSpeed();\n            this.getFormattedUploadSpeed();\n        }, 1000);\n    }\n    constructor(){\n        this.downloadSpeed = 0;\n        this.uploadSpeed = 0;\n        this.unit = \"bps\" // Initial unit is bps\n        ;\n    }\n}\nconst speedChecker = new InternetSpeedChecker();\nspeedChecker.startSpeedCheck();\nexports[\"default\"] = speedChecker;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/internet-speed-checker/dist/index.js\n");

/***/ })

};
;